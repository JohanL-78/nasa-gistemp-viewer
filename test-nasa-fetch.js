// test-nasa-fetch.js - Testez chaque m√©thode individuellement
const { exec } = require('child_process');
const { promisify } = require('util');
const https = require('https');
const dns = require('dns');
const os = require('os');

const execAsync = promisify(exec);
const NASA_URL = 'https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv';

console.log('üß™ Test des diff√©rentes m√©thodes de r√©cup√©ration des donn√©es NASA\n');

// Test 1: curl
async function testCurl() {
  console.log('1Ô∏è‚É£ Test avec curl (IPv4):');
  try {
    const start = Date.now();
    const { stdout } = await execAsync(`curl -4 -L -s -m 10 "${NASA_URL}"`);
    const time = Date.now() - start;
    console.log(`   ‚úÖ Succ√®s! Temps: ${time}ms, Taille: ${stdout.length} caract√®res`);
    return true;
  } catch (error) {
    console.log(`   ‚ùå √âchec: ${error.message}`);
    return false;
  }
}

// Test 2: wget
async function testWget() {
  console.log('\n2Ô∏è‚É£ Test avec wget (IPv4):');
  try {
    const start = Date.now();
    const { stdout } = await execAsync(`wget -4 -q -O - --timeout=10 "${NASA_URL}"`);
    const time = Date.now() - start;
    console.log(`   ‚úÖ Succ√®s! Temps: ${time}ms, Taille: ${stdout.length} caract√®res`);
    return true;
  } catch (error) {
    console.log(`   ‚ùå √âchec: ${error.message}`);
    return false;
  }
}

// Test 3: fetch natif
async function testNativeFetch() {
  console.log('\n3Ô∏è‚É£ Test avec fetch natif:');
  console.log(`   Node.js version: ${process.version}`);
  
  if (typeof fetch === 'undefined') {
    console.log('   ‚ùå fetch non disponible (Node.js < 18)');
    return false;
  }
  
  try {
    const start = Date.now();
    const response = await fetch(NASA_URL, {
      signal: AbortSignal.timeout(10000)
    });
    const text = await response.text();
    const time = Date.now() - start;
    console.log(`   ‚úÖ Succ√®s! Temps: ${time}ms, Taille: ${text.length} caract√®res`);
    return true;
  } catch (error) {
    console.log(`   ‚ùå √âchec: ${error.message}`);
    return false;
  }
}

// Test 4: https natif avec IPv4
async function testHttpsNative() {
  console.log('\n4Ô∏è‚É£ Test avec https natif (IPv4 forc√©):');
  
  // Tester d'abord la r√©solution DNS
  try {
    dns.setDefaultResultOrder('ipv4first');
    const addresses = await promisify(dns.resolve4)('data.giss.nasa.gov');
    console.log(`   üì° Adresses IPv4 trouv√©es: ${addresses.join(', ')}`);
  } catch (error) {
    console.log(`   ‚ö†Ô∏è Erreur DNS: ${error.message}`);
  }
  
  return new Promise((resolve) => {
    const start = Date.now();
    const url = new URL(NASA_URL);
    
    const options = {
      hostname: url.hostname,
      port: 443,
      path: url.pathname,
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; Node.js test)',
        'Accept': 'text/csv'
      },
      family: 4, // IPv4 uniquement
      timeout: 10000
    };
    
    let data = '';
    
    const req = https.request(options, (res) => {
      console.log(`   üì• R√©ponse HTTP: ${res.statusCode}`);
      
      if (res.statusCode !== 200) {
        console.log(`   ‚ùå √âchec: HTTP ${res.statusCode}`);
        resolve(false);
        return;
      }
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        const time = Date.now() - start;
        console.log(`   ‚úÖ Succ√®s! Temps: ${time}ms, Taille: ${data.length} caract√®res`);
        resolve(true);
      });
    });
    
    req.on('error', (error) => {
      console.log(`   ‚ùå √âchec: ${error.message}`);
      resolve(false);
    });
    
    req.on('timeout', () => {
      console.log('   ‚ùå √âchec: Timeout');
      req.destroy();
      resolve(false);
    });
    
    req.end();
  });
}

// Ex√©cuter tous les tests
async function runAllTests() {
  const results = {
    curl: await testCurl(),
    wget: await testWget(),
    nativeFetch: await testNativeFetch(),
    httpsNative: await testHttpsNative()
  };
  
  console.log('\nüìä R√©sum√© des tests:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  
  const working = Object.entries(results)
    .filter(([_, success]) => success)
    .map(([method]) => method);
  
  if (working.length > 0) {
    console.log(`‚úÖ M√©thodes fonctionnelles: ${working.join(', ')}`);
    console.log(`\nüí° Recommandation: La m√©thode "${working[0]}" est la plus rapide sur votre syst√®me.`);
  } else {
    console.log('‚ùå Aucune m√©thode n\'a fonctionn√©!');
    console.log('\nüîß Solutions possibles:');
    console.log('   - V√©rifier votre connexion internet');
    console.log('   - V√©rifier les param√®tres de firewall/proxy');
    console.log('   - Installer curl ou wget');
    console.log('   - Mettre √† jour Node.js vers la version 18+');
  }
  
  // Informations syst√®me utiles
  console.log('\nüìã Informations syst√®me:');
  console.log(`   - Node.js: ${process.version}`);
  console.log(`   - OS: ${process.platform} ${process.arch}`);
  
  // V√©rifier IPv6
  const interfaces = os.networkInterfaces();
  const hasIPv6 = Object.values(interfaces).flat().some(i => i.family === 'IPv6');
  console.log(`   - IPv6 support√©: ${hasIPv6 ? 'Oui' : 'Non'}`);
}

runAllTests().catch(console.error);